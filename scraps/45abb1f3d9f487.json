{
  "title": "スキーマ駆動についての感想",
  "closed": false,
  "archived": false,
  "created_at": "2023-10-20",
  "comments": [
    {
      "author": "convers39",
      "created_at": "2023-10-20",
      "body_markdown": "オリジナルの資料はこちら\n\nhttps://speakerdeck.com/sansantech/sansan-20230912-1"
    },
    {
      "author": "convers39",
      "created_at": "2023-10-20",
      "body_markdown": "自分のチームでも、近いことをやっていると思うので、少し感想を。\n\nまずスキーマ駆動というと、コアにあるのは以下の4つくらいかと思い、これを持って堅牢なシステムを作る目標が立てそう\n\n- カタの定義はSingle Source Of Truthにする（したい）\n- 依存関係をなくす、decentralizationとも言える\n- スキーマへのバリデーション\n- スキーマ変更への検知"
    },
    {
      "author": "convers39",
      "created_at": "2023-10-20",
      "body_markdown": "自分のチームで実装する際に、[tRPC](https://trpc.io), zod, ts-patternを利用している\n\n- BE側の1箇所に型をzodで定義することで、FE側にも参照可能になる→SSOTにまだいえない（理由は下に）が、開発体験は非常に良い\n- 依存関係はやはりBE側の定義に依存、decentralizationとはいえない\n- スキーマチェックは、zodを利用して、APIリクエストのパラメータや、データアクセス時のスキーマをバリデートする\n- スキーマ変更への検知は、\n  - 一致しないとCIとかでタイプチェックは失敗するという意味では検知されている\n  - ts-patternでenum型に対して全部exhaustiveにしている"
    },
    {
      "author": "convers39",
      "created_at": "2023-10-20",
      "body_markdown": "tRPCのやり方の限界と問題\n- DBのスキーマもマイグレーションファイルで定義する必要があり、2つのsource of truthをメンテしないといけない\n  - 片一方の変更では、CIのタイプチェックではわかりずらい\n  - 基本zodのスキーマの変更＋DB定義の変更が都度必須\n  - open api の定義とか1つにまとめて、zod & DB schemaをそちらから生成する、若干難しそう→一歩譲って、CIでバリデーションかけるのができるかもしれない\n- 依存性は存在（だが、ここは一定tradeoffとも考えられる）\n  - FE側はBE側の定義を依存する（ただ開発体験の意味ではむしろメリット）\n  - もしFE側で重複定義するとメンテナンス性が一気に下がる\n  - 基本開発エンジニアにはフルスタックの視野を持ってほしくなる\n- スキーママッピング一致性の問題（かなり共通問題）\n  - 例えば、DBのデータタイプと、TSのタイプとのマッピング\n  - BE -> FEの時のシリアライズ化によって、例えばDate型をやむを得ずStringにするなど"
    },
    {
      "author": "convers39",
      "created_at": "2023-10-20",
      "body_markdown": "sansanさんの事例について\n- ルーター・コントローラーにリクエストを振り分けるまえに、バリデーションのミドルウェアを最初の構成から入れるべき（anyで受け取るのは正直驚きました）\n- openapi スキーマからFE側のクライエントとBE側のタイプ定義を生成するのは嬉しい\n  - 同じくDBのスキーマ定義はどうなるか気になる\n  - やはりDBのレーヤーも含めてSSOTを求めるのが厳しい？（そもそも求めるべきではない説も）\n- huskyで変更検知は良いアイディア\n- スキーマのファイルはBE側においている\n  - monorepoで、スキーマを定義、そしてタイプ・クライエント生成する部分のスクリプトを、一つのパッケージにまとめるのはどうかなと",
      "body_updated_at": "2023-10-20"
    }
  ]
}